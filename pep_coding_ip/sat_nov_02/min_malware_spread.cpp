class Solution {
private:
    struct Subset {
        int parent;
        int rank;
        int size;
    };
    
    int fp(Subset subsets[],int i) {
        if(i!=subsets[i].parent)
            subsets[i].parent=fp(subsets,subsets[i].parent);
        return subsets[i].parent;
    }
    
    void unite(Subset subsets[],int x,int y) {
        int xset=fp(subsets,x);
        int yset=fp(subsets,y);
        
        if(subsets[xset].rank>subsets[yset].rank) {
            subsets[yset].parent=xset;
            subsets[xset].size=subsets[xset].size+subsets[yset].size;
        } else if(subsets[xset].rank<subsets[yset].rank) {
            subsets[xset].parent=yset;
            subsets[yset].size=subsets[xset].size+subsets[yset].size;
        } else {
            subsets[xset].rank++;
            subsets[yset].parent=xset;
            subsets[xset].size=subsets[xset].size+subsets[yset].size;
        }
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        Subset subsets[graph.size()];
        
        for(int i=0;i<graph.size();i++) {
            subsets[i]=Subset{i,0,1};
        }
        
        for(int i=0;i<graph.size();i++) {
            for(int j=0;j<graph[i].size();j++) {
                if(graph[i][j]==1) {
                    int u=i;
                    int v=j;
                    if(fp(subsets,u)!=fp(subsets,v))
                        unite(subsets,u,v);
                }
            }
        }
        
        int maxGrpSize=0,maxGrpIdx=-1,nodeToRemove=INT_MAX;
        for(int i=0;i<initial.size();i++) {
            int grpIdx=fp(subsets,initial[i]);
            // cout<<initial[i]<<", grp:"<<grpIdx<<", size:"<<subsets[grpIdx].size<<endl;
            if(maxGrpSize<=subsets[grpIdx].size) {
                maxGrpSize=subsets[grpIdx].size;
                nodeToRemove=min(nodeToRemove,initial[i]);
            }
        }
        return nodeToRemove;
    }
};